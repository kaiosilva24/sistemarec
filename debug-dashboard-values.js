// Script de debug para verificar valores do dashboard
console.log('üîç [Debug Dashboard] Iniciando verifica√ß√£o dos valores...');

// Fun√ß√£o para testar valores do dataManager
async function testDataManagerValues() {
  try {
    console.log('üìä [Debug Dashboard] Testando dataManager...');
    
    // Verificar se dataManager est√° dispon√≠vel
    if (typeof dataManager === 'undefined') {
      console.error('‚ùå [Debug Dashboard] dataManager n√£o est√° dispon√≠vel');
      return;
    }
    
    console.log('‚úÖ [Debug Dashboard] dataManager encontrado');
    
    // Testar loadTotalStockValue
    console.log('üîç [Debug Dashboard] Testando loadTotalStockValue...');
    const totalStockValue = await dataManager.loadTotalStockValue();
    console.log(`üìä [Debug Dashboard] Total Stock Value: R$ ${totalStockValue.toFixed(2)}`);
    
    // Testar loadAverageResaleProfit
    console.log('üîç [Debug Dashboard] Testando loadAverageResaleProfit...');
    const averageResaleProfit = await dataManager.loadAverageResaleProfit();
    console.log(`üìä [Debug Dashboard] Average Resale Profit: R$ ${averageResaleProfit.toFixed(2)}`);
    
    // Verificar localStorage
    console.log('üîç [Debug Dashboard] Verificando localStorage...');
    const resaleValueKey = 'resale_total_stock_value';
    const resaleValue = localStorage.getItem(resaleValueKey);
    console.log(`üìä [Debug Dashboard] localStorage[${resaleValueKey}]: ${resaleValue}`);
    
    // Verificar dados do Supabase diretamente
    console.log('üîç [Debug Dashboard] Testando Supabase diretamente...');
    if (typeof supabase !== 'undefined') {
      const { data: stockItems } = await supabase
        .from('stock_items')
        .select('*');
      
      console.log(`üìä [Debug Dashboard] Stock Items encontrados: ${stockItems?.length || 0}`);
      
      if (stockItems && stockItems.length > 0) {
        stockItems.forEach(item => {
          console.log(`  - ${item.item_name} (${item.item_type}): Qtd ${item.quantity}, Custo ${item.unit_cost}, Total ${item.total_value}`);
        });
      }
    } else {
      console.warn('‚ö†Ô∏è [Debug Dashboard] supabase n√£o est√° dispon√≠vel');
    }
    
  } catch (error) {
    console.error('‚ùå [Debug Dashboard] Erro ao testar valores:', error);
  }
}

// Fun√ß√£o para verificar o hook useMetrics
function testMetricsHook() {
  console.log('üîç [Debug Dashboard] Verificando hook useMetrics...');
  
  // Tentar acessar o componente React que usa o hook
  const metricsGridElement = document.querySelector('[data-testid="metrics-grid"]');
  if (metricsGridElement) {
    console.log('‚úÖ [Debug Dashboard] MetricsGrid encontrado no DOM');
  } else {
    console.warn('‚ö†Ô∏è [Debug Dashboard] MetricsGrid n√£o encontrado no DOM');
  }
  
  // Verificar se h√° elementos com valores zerados
  const currencyElements = document.querySelectorAll('[data-format="currency"]');
  console.log(`üìä [Debug Dashboard] Elementos de moeda encontrados: ${currencyElements.length}`);
  
  currencyElements.forEach((element, index) => {
    const text = element.textContent || '';
    console.log(`  - Elemento ${index + 1}: "${text}"`);
    if (text.includes('R$ 0,00')) {
      console.warn(`‚ö†Ô∏è [Debug Dashboard] Valor zerado encontrado: "${text}"`);
    }
  });
}

// Executar testes
console.log('üöÄ [Debug Dashboard] Executando testes...');

// Aguardar um pouco para garantir que a p√°gina carregou
setTimeout(() => {
  testDataManagerValues();
  testMetricsHook();
}, 2000);

// Disponibilizar fun√ß√µes globalmente
window.testDataManagerValues = testDataManagerValues;
window.testMetricsHook = testMetricsHook;

console.log('‚úÖ [Debug Dashboard] Script carregado. Execute testDataManagerValues() ou testMetricsHook() manualmente se necess√°rio.');
